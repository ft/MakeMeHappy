#!@@PYTHON@@

import argparse
import os
import sys

import makemehappy.build as build
import makemehappy.utilities as mmh
import makemehappy.toplevel as top

from logbook import Logger
from makemehappy.buildroot import BuildRoot
from makemehappy.cut import CodeUnderTest
from makemehappy.yamlstack import ConfigStack, SourceStack
from makemehappy.loghandler import MMHLogHandler

version = "@@VERSION@@"
fullname = "MakeMeHappy"
name = "mmh"

log = Logger(fullname)
log.handlers.append(MMHLogHandler())

cfg = ConfigStack(log, 'Configuration',
                  mmh.dotFile('config.yaml'),
                  mmh.xdgFile('config.yaml'),
                  '@@ETCDIR@@/config.yaml',
                  '@@DATADIR@@/config.yaml')

src = SourceStack(log, 'Source Definition',
                  mmh.dotFile('sources.yaml'),
                  mmh.xdgFile('sources.yaml'),
                  '@@ETCDIR@@/sources.yaml',
                  '@@DATADIR@@/sources.yaml')

cmakeParameters = None
cmakeSeparator = None
try:
    cmakeSeparator = sys.argv.index('++')
    if (cmakeSeparator == len(sys.argv)):
        cmakeParameters = []
    else:
        cmakeParameters = sys.argv[cmakeSeparator+1:]
    sys.argv = sys.argv[0:cmakeSeparator]
except ValueError:
    cmakeParameters = None

ap = argparse.ArgumentParser()

ap.add_argument("-d", "--directory",
                default = None,
                help = "specify the build-root directory")

ap.add_argument("-m", "--module",
                default = "module.yaml",
                help = "specify the file that contains the"
                     + " module description (defaults to module.yaml)")

ap.add_argument("-p", "--preserve", action = "store_true",
                help = "preserve build root instead of deleting it")

ap.add_argument("-L", "--log-all", action = "store_true",
                help = "send all output to logging facility")

ap.add_argument("-l", "--log-to-file", action = "store_true",
                help = "log output to file (implies --log-all)")

ap.add_argument("-f", "--log-file",
                default = None,
                help = "specify log-file name to use")

ap.add_argument("-T", "--toolchains",
                default = None,
                help = "select toolchains to include in build")

ap.add_argument("-B", "--buildtools",
                default = None,
                help = "select buildtools to include in build")

ap.add_argument("-C", "--buildconfigs",
                default = None,
                help = "select build configurations to include in build")

ap.add_argument("-A", "--architectures",
                default = None,
                help = "select architectures to include in build")

ap.add_argument("-Q", "--query",
                default = None,
                help = "query aspects about the program")

ap.add_argument("-I", "--interfaces",
                default = None,
                help = "select interfaces to include in build")

ap.add_argument("-s", "--source",
                default = [ ],
                action = "append",
                help = "add a module source definition")

ap.add_argument("-F", "--force",
                action = "store_true",
                help = "force using MakeMeHappy.yaml")

ap.add_argument("-V", "--version", action = "store_true",
                help = "show program version")

ap.add_argument("-v", "--verbose", action = "store_true",
                help = "produce verbose output")

ap.add_argument("rest",
                nargs = "*",
                default = [ ],
                help = "sub command to carry out")

cmdargs = ap.parse_args()

if cmdargs.query is not None:
    cfg.load()
    cut = CodeUnderTest(log, cfg, cmdargs, src, cmdargs.module)
    if (os.path.isfile(cmdargs.module) == True):
        cut.loadModule()
    q = cmdargs.query
    result = []
    if (q == 'toolchains'):
        result = cut.allToolchains()
    elif (q == 'interfaces'):
        result = cut.allInterfaces()
    elif (q == 'architectures'):
        result = cut.allArchitectures()
    elif (q == 'buildtools'):
        result = cut.allBuildtools()
    elif (q == 'buildconfigs'):
        result = cut.allBuildConfigs()
    else:
        mmh.warn('Unknown query: {}'.format(q))
        exit(1)
    print(" ".join(result))
    exit(0)

if (isinstance(cmdargs.directory, str)):
    cmdargs.preserve = not(cmdargs.preserve)

if (cmdargs.verbose):
    mmh.setVerbosity(1)

if (cmdargs.version):
    print("{} ({}) version {}".format(fullname, name, version))
    exit(0)

for item in cmdargs.source:
    if (os.path.isfile(item) == False):
        mmh.warn("Source definition does not exist: {}".format(item))
        exit(1)
    src.push(item)

if cmdargs.log_to_file:
    cmdargs.log_all = True
    if cmdargs.log_file is not None:
        log.handlers[0].setFile(cmdargs.log_file)
else:
    log.handlers[0].setFile(False)

if cmdargs.toolchains is not None:
    cmdargs.toolchains = cmdargs.toolchains.split(',')
if cmdargs.buildtools is not None:
    cmdargs.buildtools = cmdargs.buildtools.split(',')
if cmdargs.buildconfigs is not None:
    cmdargs.buildconfigs = cmdargs.buildconfigs.split(',')
if cmdargs.architectures is not None:
    cmdargs.architectures = cmdargs.architectures.split(',')
if cmdargs.interfaces is not None:
    cmdargs.interfaces = cmdargs.interfaces.split(',')

cmdargs.cmake = cmakeParameters

cmd = mmh.lookupCommand(cmdargs.rest)
cmdargs.fromyaml = False
if (cmd != 'reset-setup' and cmdargs.directory != None and mmh.noParameters(cmdargs)):
    fn = os.path.join(cmdargs.directory, 'MakeMeHappy.yaml')
    if (os.path.exists(fn)):
        data = mmh.load(fn)
        if (cmdargs.force == True):
            data['version'] = version
            mmh.dump(fn, data)
        cmdargs.fromyaml = True
        if (mmh.matchingVersion(version, data)):
            if ('parameters' in data):
                p = data['parameters']
                log.info('Loading parameters from {}'.format(fn))
                if 'architectures' in p:
                    cmdargs.architectures = p['architectures']
                if 'buildconfigs' in p:
                    cmdargs.buildconfigs = p['buildconfigs']
                if 'buildtools' in p:
                    cmdargs.buildtools = p['buildtools']
                if 'interfaces' in p:
                    cmdargs.interfaces = p['interfaces']
                if 'toolchains' in p:
                    cmdargs.toolchains = p['toolchains']
                if 'cmake' in p:
                    cmdargs.cmake = p['cmake']
            if ('cmake' in data):
                p = data['cmake']
                log.info('Loading cmake-information from {}'.format(fn))
                if 'module-path' in p:
                    cmdargs.modulePath = p['module-path']
                if 'toolchain-path' in p:
                    cmdargs.toolchainPath = p['toolchain-path']
        else:
            fv = None
            if (not data is None and 'version' in data):
                fv = data['version']
            log.error("{}: Version mismatch: {} != {}".format(fn, version, fv))
            log.error("If suitable ‘--force’ to force using the file!")
            exit(1)

def adjustConfig(cfg, args):
    layer = {}
    adjustments = 0
    if args.log_all == True:
        layer['log-all'] = not(cfg.lookup('log-all'))
        adjustments = adjustments + 1
    if args.log_to_file == True:
        layer['log-to-file'] = not(cfg.lookup('log-to-file'))
        adjustments = adjustments + 1
    if adjustments > 0:
        cfg.pushLayer(layer)

if (len(cmdargs.rest) == 0):
    cmd = 'build'
    cmdargs.rest = [ cmd ]
    log.info("Starting up using default command ({})".format(cmd))
elif (cmd != False):
    log.info("Starting up using '{}' command".format(cmd))

def requireModuleDefinition(args):
    if (os.path.isfile(args.module) == False):
        mmh.warn("Module definition does not exist: {}".format(args.module))
        exit(1)

if (cmd == "build-tree-init"):
    requireModuleDefinition(cmdargs)
    cfg.load()
    adjustConfig(cfg, cmdargs)
    cut = CodeUnderTest(log, cfg, cmdargs, src, cmdargs.module)
    cut.initRoot(version, cmdargs)
    cut.populateRoot()
    cut.linkIntoRoot()

elif (cmd == "fetch-dependencies"):
    requireModuleDefinition(cmdargs)
    cfg.load()
    adjustConfig(cfg, cmdargs)
    cut = CodeUnderTest(log, cfg, cmdargs, src, cmdargs.module)
    cut.initRoot(version, cmdargs)
    cut.loadModule()
    cut.cliAdjust(toolchains    = cmdargs.toolchains,
                  architectures = cmdargs.architectures,
                  buildconfigs  = cmdargs.buildconfigs,
                  buildtools    = cmdargs.buildtools,
                  interfaces    = cmdargs.interfaces)
    cut.loadSources()
    cut.changeToRoot()
    cut.loadDependencies()

elif (cmd == "generate-toplevel"):
    requireModuleDefinition(cmdargs)
    cfg.load()
    adjustConfig(cfg, cmdargs)
    cut = CodeUnderTest(log, cfg, cmdargs, src, cmdargs.module)
    cut.initRoot(version, cmdargs)
    cut.loadModule()
    cut.cliAdjust(toolchains    = cmdargs.toolchains,
                  architectures = cmdargs.architectures,
                  buildconfigs  = cmdargs.buildconfigs,
                  buildtools    = cmdargs.buildtools,
                  interfaces    = cmdargs.interfaces)
    cut.loadSources()
    cut.changeToRoot()
    cut.loadDependencies()
    cut.cmakeIntoYAML()
    cut.generateToplevel()

elif (cmd == "reset-setup"):
    if (cmdargs.directory == None):
        print("reset-argument only works with -d!")
        exit(1)

    fn = os.path.join(cmdargs.directory, 'MakeMeHappy.yaml')
    data = { 'version': version }
    mmh.dump(fn, data)

elif (cmd == "run-instance"):
    if (len(cmdargs.rest) > 1):
        cfg.load()
        for d in cmdargs.rest[1:]:
            build.runInstance(cfg, log, cmdargs, d)
        exit(0)

    requireModuleDefinition(cmdargs)
    cfg.load()
    adjustConfig(cfg, cmdargs)
    cut = CodeUnderTest(log, cfg, cmdargs, src, cmdargs.module)
    cut.initRoot(version, cmdargs)
    cut.loadModule()
    cut.cliAdjust(toolchains    = cmdargs.toolchains,
                  architectures = cmdargs.architectures,
                  buildconfigs  = cmdargs.buildconfigs,
                  buildtools    = cmdargs.buildtools,
                  interfaces    = cmdargs.interfaces)
    cut.loadSources()
    cut.changeToRoot()
    cut.loadDependencies()
    cut.cmakeIntoYAML()
    cut.build()

    cut.renderStatistics()
    if cut.wasSuccessful():
        log.info('All {} builds succeeded.'.format(cut.countBuilds()))
        exit(0)
    else:
        log.info('{} build(s) out of {} failed.'
                 .format(cut.countFailed(), cut.countBuilds()))
        exit(1)

elif (cmd == "build"):
    requireModuleDefinition(cmdargs)

    cfg.load()
    adjustConfig(cfg, cmdargs)
    cut = CodeUnderTest(log, cfg, cmdargs, src, cmdargs.module)
    cut.loadModule()
    cut.cliAdjust(toolchains    = cmdargs.toolchains,
                  architectures = cmdargs.architectures,
                  buildconfigs  = cmdargs.buildconfigs,
                  buildtools    = cmdargs.buildtools,
                  interfaces    = cmdargs.interfaces)
    cut.loadSources()
    cut.initRoot(version, cmdargs)
    if cmdargs.log_to_file is True and cmdargs.log_file is None:
        fn = cut.root.name() + '.log'
        print('Logging to: {}'.format(fn))
        log.handlers[0].setFile(fn)
    cut.populateRoot()
    cut.linkIntoRoot()
    cut.changeToRoot()
    cut.loadDependencies()
    cut.cmakeIntoYAML()
    cut.generateToplevel()
    cut.build()

    if (cmdargs.preserve == False):
        cut.cleanupRoot()

    cut.renderStatistics()
    if cut.wasSuccessful():
        log.info('All {} builds succeeded.'.format(cut.countBuilds()))
        exit(0)
    else:
        log.info('{} build(s) out of {} failed.'
                 .format(cut.countFailed(), cut.countBuilds()))
        exit(1)

elif (cmd == "dump-description"):
    data = mmh.load(cmdargs.module)
    mmh.pp(data)

elif (cmd == "show-source"):
    src.load()
    names = cmdargs.rest[1:]
    if (len(names) == 0):
        names = src.allSources();

    for name in names:
        data = src.lookup(name)
        print("{}: ".format(name), end='')
        print(data)

elif (cmd == "download-source"):

    if (len(cmdargs.rest) != 2):
        log.error("Usage: download-source Module")
        exit(1)

    cfg.load()
    src.load()

    module = cmdargs.rest[1]
    meta = src.lookup(module)
    source = meta['repository']
    mmh.loggedProcess(cfg, log, ['git', 'clone', source])

elif (cmd == "download-sources"):
    if (len(cmdargs.rest) > 2):
        log.error("Usage: download-sources [DestinationDirectory]")
        exit(1)

    destination = '.'
    if (len(cmdargs.rest) == 2):
        destination = cmdargs.rest[1]

    cfg.load()
    src.load()
    loaded = {}
    failed = {}
    for source in src.data:
        if not('modules' in source):
            continue
        for module in source['modules']:
            if (module in loaded):
                log.info("Module {} already defined by {}",
                         module, loaded[module]['source'])
                continue
            sf = os.path.join(source['root'], source['definition'])
            dd = os.path.join(destination, module)
            repo = source['modules'][module]['repository']
            log.info("Downloading module {} from {}...", module, repo)
            rc = mmh.loggedProcess(cfg, log, ['git', 'clone', repo, dd])
            if (rc == 0):
                log.info("Downloading module {} was successful.", module)
            else:
                log.error("Downloading module {} failed!", module)
                failed[module] = {'source': sf, 'repository': repo }
            loaded[module] = {'source': sf, 'repository': repo }
    for mod in sorted(loaded):
        log.info("  Success: {} from {} [{}]",
                 mod,
                 loaded[mod]['repository'],
                 loaded[mod]['source'])
    if (len(failed) == 0):
        log.info("Downloading ALL sources succeeded!")
    else:
        log.error("Downloading {} of {} sources failed!",
                  len(failed), len(loaded))
        for fail in sorted(failed):
            log.error("  Failure: {} from {} [{}]",
                      fail,
                      failed[fail]['repository'],
                      failed[fail]['source'])

elif (isinstance(cmd, str)):
    print("Not implemented yet: {}".format(cmd))

else:
    mmh.warn("Unknown command: {}".format(cmdargs.rest[0]))
    exit(1)

exit(0)
