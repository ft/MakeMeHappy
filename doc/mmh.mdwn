# Name

mmh - MakeMeHappy - Module Build Automation Tool


# Synopsis

`mmh [-h] [-d DIRECTORY] [-m MODULE] [-p] [-s SOURCE] [-V] [-v] CMD... [++ CMAKE-PARAMs...]`


# Description

`mmh` is an orchestration tool to automatically arrange a build-environment to
build modular software projects, that use CMake as their build system. It is
mostly aimed for embedded projects. It requires the use of the `ufw` library
for its additional cmake modules. What makes `mmh` an orchestration tool is its
emphasis on mostly just calling out to applications like `cmake` or `git` to
achieve its goals. These goals are specified in a declarative manner via files
in YAML format. It is meant to perform many tedious and repetitive tasks, that
occur when building portable, modular software with many toolchains, build
configurations, build tools, build configurations and the like.

MakeMeHappy derives its name from answering the question if a piece of software
can be build an tested with as many such combinations as possible, thus
delivering happy news to the user.


## Motivation

One possible approach to assemble larger software projects is to split logical
parts into modules, create APIs and use multiple modules that, in combination,
create a larger, more complex application or library. The Git version control
system allows the assembly of precise states of such modules via its submodule
system.

Building such super projects is mostly trivial, because — **by** **design** —
the super project incorporates *all* required modules with all of their
dependencies. Using CMake at the top-level of the super project makes it
possible (albeit sometimes a little cumbersome, due to cmake-command lines
becoming unwieldy; but see `mmh`'s system build mode later about that) use the
different modules, as instantiated by Git's submodule system, as well. The
approach is very flexible and has the upside of enforcing API discipline as
well.

A problem, that arises from this approach however, is the building a *single*
module. This is very common, especially with version control and continuous
integration in place, where it is desirable to build a module and run its test
suite any time a developer pushes/commits into the module's repository.

This is where `mmh`'s module build mode comes into play. You can think of it as
a tool that, given enough information, does this:

- Generate an ephemeral kind of a super project:
  - …that includes the current state of a module itself (via symbolic link).
  - …with all its dependencies (as well as all recursive dependencies)
  - …with a generated top-level CMakeLists.txt able to run the build.
- Configure the build-tree from the ephemeral source tree.
- Builds all dependencies and finally the module itself.
- Runs any tests it can.
- Does this for **many** build variants.
- Finally print a summary of the collected build-statistics.

The last point is routed with `mmh`'s origin as a continuous integration
driver. As such, it makes a point in exercising its ephemeral super project
using a combination of `toolchains`, `architectures`, `buildconfigs` and
`buildtools`. All of that is powered by a layered configuration approach, that
allows for fine-grained control of all of these parameters as well as module
sources.


## General Operation

`mmh` has two modes of operation:

- Module build mode
- System build mode

In module build mode, it does exactly what is described in the `Movivation`
section. The system build mode was added later. It is similar to module build
mode, but instead of generating a top-level `CMakeLists.txt` file and
downloading dependencies, it works in a repository that solves these problems
beforehand, like a larger system's super-project that references all
dependencies as git-submodules (or any other means, `mmh` does not really care
how the source tree came to be).

Calling `mmh` without arguments causes it to choose one of these modes,
depending on whether a file exists:

- `module.yaml`: Use module build mode, with its `build` command.
- `system.yaml`: Use system build mode, with its `build` command.
- Otherwise, error out.

Beyond these two modes, `mmh` has a couple of smaller, additional features,
that will be described later in this document.

# Command Reference

All system mode commands are sub-commands to the `system` command. Module build
mode commands are top-level commands. This is due to the fact that module build
mode was the only mode of operation in `mmh` for a while. Other features are
also top-level commands.

## Module Build Mode

### `build`: Build a module in many variants

TBD.

### `build-tree-init`: Initialise a build tree

This command has a shorter alias: `init`

TBD.

### `fetch-dependencies`: Download dependencies of a module

This command has a shorter alias: `deps`

TBD.

### `focus-instance`: Focus a module instance's build-tree

This command has a shorter alias: `focus`

TBD.

### `generate-toplevel`: Generate toplevel of module build-tree

This command has a shorter alias: `top`

TBD.

### `list-instances`: List instances available in build-tree

This command has a shorter alias: `list`

TBD.

### `prepare`: Generate toplevel of module build-tree

TBD.

### `run-instance`: Run previously configured build-tree

This command has a shorter alias: `run`

TBD.


## System Build Mode

All of these commands are sub-commands to the `system` command.

### `build`: Build all or specified build instances

TBD.

### `clean`: Clean all or specified build instances

TBD.

### `db`: Link compile command db to system root

TBD.

### `list`: List all specified build instances

TBD.

### `rebuild`: Rebuild all or specified build instances

TBD.


## Additional Features

### `download-source`: Download sources for a module

This command has a shorter alias: `get`

### `download-sources`: Download sources for ALL module

TBD.


### `dump-description`: Show parsed instruction file data

This command has a shorter alias: `dump`

TBD.

### `reset-setup`: Reset build-tree meta-data

This command has a shorter alias: `reset`

TBD.

### `revision-overrides`: Show and test revision overrides

This command has a shorter alias: `revs`

TBD.

### `show-result`: Show result table from log-file

This command has a shorter alias: `result`

TBD.

### `show-source`: Show source location for module(s)

This command has a shorter alias: `show`

TBD.


# Setup

## Configuration Data

TBD.

## Source Data

TBD.


# Build Specification

## Module Specification

Modules are specified in a file called `module.yaml`. There are two different
kinds of modules in `mmh`: `generic` and `zephyr`. The generic type uses CMake
best-practices (like toolchain-files and build-type configuration), and can
build libraries as well as applications. This leans a lot on the `ufw` library,
that implements a number of CMake modules, that `mmh` uses, as well as supplies
a number of toolchain files. The `zephyr` type is in support of the Zephyr Real
Time Operating System. Its builds are very much application centric, and while
its build-system is CMake as well, it solves a number of problems differently
from classic CMake; notably the way toolchains are set up and build-type
configuration is done.

TBD.

## System Specification

A system is specified by a number of builds to be performed. With `mmh`, this
is done in a file called `system.yaml`. There are two different kinds of
builds: `board` and `zephyr` builds. In `board` builds, the name of a board is
defined, along with one of (possibly) multiple toolchains, and
build-configurations. With these parameters the top-level build system is
invoked, building all code registered with this build variant. In `zephyr`
builds, one build builds one application, using a certain toolchain, a certain
build-configuration, and a certain board, using a number of zephyr-modules.
Similarly to `board` builds, `mmh` allows you to specify multiple toolchains,
build-configurations, as well as target boards. `mmh` will build all of these
variants.

Note that in system mode, `mmh` will never attempt to fetch any sort of source
code. It only runs the build system with parameters specified in `system.yaml`,
possibly many times.

TBD.


# Examples

Building a module is predicated on the existence of a file called
`module.yaml`. With it in place, you can run a combined build of all build
instances like this:

    % mmh

…which is exactly equivalent to this:

    % mmh build

With that, the default behaviour will run the builds, summarise how the process
went and remove the build tree created afterwards. In order to keep the build
tree around, you can name a specific directory to use instead:

    % mmh -d ci

…which does the same operation as before, but instead of using a temporary
directory that gets removed afterward, use the directory named `ci` and keep it
around after running all instances.

If this is done with all default settings and the `ufw` library as the target
module, `mmh` will try and run forty(!) build instances. This exercised the
code base with a lot of compilers, build-tools and build settings, but can take
a bit of time. `mmh` allows users to optionally pick the respective sets of all
these parameters. For example, to only use `ninja` as a build tool, `gnu` and
`clang` as toolchains and `debug` and `release`, you can do the following:

    % mmh -d ci -T gnu,clang -B ninja -C release,debug

…bringing down the number of instances to four instead of forty. You can also
hand additional parameters to each configuration call to `cmake` using `++`
followed by a list of such parameters at the end of a `mmh build` call:

    % mmh -d ci -T gnu,clang -B ninja -C release,debug ++ -DAAA=aaa -DBBB=bbb

With calls like this, `mmh` records the set of parameters used in a file in the
generated build-tree, so that re-running the same build is as easy as this:

    % mmh -d ci run-instance


# See Also

*cmake(1)*, *cmake-variables(7)*, *ctest(1)*, *git(1)*, *gitworkflows(7)*,
*make(1)*, *ninja(1)*


# Copyright

Copyright 2019-2024 Frank Terbeck ‹ft@bewatermyfriend.org›, All rights reserved.

Redistribution  and   use  in  source   and  binary  forms,  with   or  without
modification, are permitted provided that the following conditions are met:

  1. Redistributions  of source  code must retain  the above  copyright notice,
     this list of conditions and the following disclaimer.

  2. Redistributions in binary form  must reproduce the above copyright notice,
     this list of conditions and  the following disclaimer in the documentation
     and/or other materials provided with the distribution.

 THIS  SOFTWARE IS  PROVIDED "AS  IS" AND  ANY EXPRESS  OR IMPLIED  WARRANTIES,
 INCLUDING, BUT NOT  LIMITED TO, THE IMPLIED WARRANTIES  OF MERCHANTABILITY AND
 FITNESS FOR A PARTICULAR PURPOSE ARE  DISCLAIMED. IN NO EVENT SHALL THE AUTHOR
 OR CONTRIBUTORS OF THE PROJECT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR  CONSEQUENTIAL DAMAGES (INCLUDING, BUT  NOT LIMITED TO,
 PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 BUSINESS INTERRUPTION) HOWEVER CAUSED AND  ON ANY THEORY OF LIABILITY, WHETHER
 IN CONTRACT,  STRICT LIABILITY,  OR TORT  (INCLUDING NEGLIGENCE  OR OTHERWISE)
 ARISING IN  ANY WAY OUT OF  THE USE OF THIS  SOFTWARE, EVEN IF ADVISED  OF THE
 POSSIBILITY OF SUCH DAMAGE.
